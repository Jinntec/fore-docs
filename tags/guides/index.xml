<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guides on Fore Documentation</title><link>https://jinntec.github.io/fore-docs/tags/guides/</link><description>Recent content in Guides on Fore Documentation</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 19 Jul 2024 10:19:53 +0200</lastBuildDate><atom:link href="https://jinntec.github.io/fore-docs/tags/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Scopes</title><link>https://jinntec.github.io/fore-docs/architecture/scopes/</link><pubDate>Fri, 19 Jul 2024 10:19:53 +0200</pubDate><guid>https://jinntec.github.io/fore-docs/architecture/scopes/</guid><description>Each &amp;lt;fx-fore&amp;gt; element creates its own scope which controls:
access to data evaluation of bindings evaluation of ids events For the above graphic that means that data, ids and bindings being used in the inner Fore are being resolved within its boundaries and events won&amp;rsquo;t propagate upwards to the outer Fore.
Likewise the outer Fore has no direct access to the inner Fore (unless using the API within a custom function).</description></item><item><title>Modularization</title><link>https://jinntec.github.io/fore-docs/guides/modularization/</link><pubDate>Wed, 26 Jul 2023 10:53:29 +0200</pubDate><guid>https://jinntec.github.io/fore-docs/guides/modularization/</guid><description>&amp;ldquo;Modularization is the activity of dividing a product or system into interchangeable modules.&amp;rdquo; (stolen somewhere)
As long as things stay simple and you have just a bunch of controls, there&amp;rsquo;s not much logic and just a few data fields you don&amp;rsquo;t have to worry much about Modularization.
However, if you&amp;rsquo;re building a whole application things will quickly change - the markup grows and grows with some undesired effects on productivity:</description></item></channel></rss>